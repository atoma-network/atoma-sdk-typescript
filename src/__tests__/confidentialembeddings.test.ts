/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { AtomaSDK } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Confidential Embeddings Confidential Embeddings Create", async () => {
  const testHttpClient = createTestHTTPClient("confidential_embeddings_create");

  const atomaSDK = new AtomaSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "value",
  });

  const result = await atomaSDK.confidentialEmbeddings.create({
    ciphertext: "<value>",
    clientDhPublicKey: "<value>",
    modelName: "<value>",
    nodeDhPublicKey: "<value>",
    nonce: "<value>",
    plaintextBodyHash: "<value>",
    salt: "<value>",
    stackSmallId: 486589,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    ciphertext: "<value>",
    nonce: "<value>",
    usage: {
      completionTokens: 10,
      completionTokensDetails: {
        acceptedPredictionTokens: 10,
        audioTokens: 0,
        reasoningTokens: 10,
        rejectedPredictionTokens: 0,
      },
      promptTokens: 10,
      promptTokensDetails: {
        audioTokens: 0,
        cachedTokens: 10,
      },
      totalTokens: 20,
    },
  });
});
