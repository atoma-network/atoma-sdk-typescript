/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { nodesNodesCreateLock } from "../../funcs/nodesNodesCreateLock.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.NodesCreateLockRequest$inboundSchema,
};

export const tool$nodesNodesCreateLock: ToolDefinition<typeof args> = {
  name: "nodes-nodes-create-lock",
  description: `Create a node lock for confidential compute

This endpoint attempts to find a suitable node and retrieve its public key for encryption
through a two-step process:

1. First, it tries to select an existing node with a public key directly.
2. If no node is immediately available, it falls back to finding the cheapest compatible node
   and acquiring a new stack entry for it.

This endpoint is specifically designed for confidential compute scenarios where
requests need to be encrypted before being processed by nodes.

## Errors
  - \`INTERNAL_SERVER_ERROR\` - Communication errors or missing node public keys
  - \`SERVICE_UNAVAILABLE\` - No nodes available for confidential compute`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await nodesNodesCreateLock(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
