/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { nodesNodesCreate } from "../../funcs/nodesNodesCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.NodesCreateRequest$inboundSchema,
};

export const tool$nodesNodesCreate: ToolDefinition<typeof args> = {
  name: "nodes-nodes-create",
  description: `Create node

This endpoint allows nodes to register or update their public address in the system.
When a node comes online or changes its address, it can use this endpoint to ensure
the system has its current address for routing requests.

## Errors

Returns various \`AtomaProxyError\` variants:
* \`MissingHeader\` - If the signature header is missing
* \`InvalidHeader\` - If the signature header is malformed
* \`InvalidBody\` - If:
  - The request body cannot be read
  - The signature is invalid
  - The body cannot be parsed
  - The sui address doesn't match the signature
* \`InternalError\` - If:
  - The state manager channel is closed
  - The registration event cannot be sent
  - Node Sui address lookup fails`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await nodesNodesCreate(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
