/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { completionsCreate } from "../../funcs/completionsCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.CompletionsRequest$inboundSchema,
};

export const tool$completionsCreate: ToolDefinition<typeof args> = {
  name: "completions-create",
  description: `Create completions

This function processes completion requests by using the chat completions endpoint.

## Returns

Returns a Response containing either:
- A streaming SSE connection for real-time completions
- A single JSON response for non-streaming completions

## Errors

Returns an error status code if:
- The request processing fails
- The streaming/non-streaming handlers encounter errors
- The underlying inference service returns an error`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await completionsCreate(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
