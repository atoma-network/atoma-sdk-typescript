/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { confidentialEmbeddingsCreate } from "../../funcs/confidentialEmbeddingsCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.ConfidentialComputeRequest$inboundSchema,
};

export const tool$confidentialEmbeddingsCreate: ToolDefinition<typeof args> = {
  name: "confidential-embeddings-create",
  description: `Create confidential embeddings

This endpoint follows the OpenAI API format for generating vector embeddings from input text,
but with confidential processing (through AEAD encryption and TEE hardware).
The handler receives pre-processed metadata from middleware and forwards the request to
the selected node.

## Returns
* \`Ok(Response)\` - The embeddings response from the processing node
* \`Err(AtomaProxyError)\` - An error status code if any step fails

## Errors
* \`INTERNAL_SERVER_ERROR\` - Processing or node communication failures`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await confidentialEmbeddingsCreate(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
