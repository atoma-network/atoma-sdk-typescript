/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Individual image data in the response
 */
export type ImageData = {
  revisedPrompt?: string | null | undefined;
  url: string;
};

/** @internal */
export const ImageData$inboundSchema: z.ZodType<
  ImageData,
  z.ZodTypeDef,
  unknown
> = z.object({
  revised_prompt: z.nullable(z.string()).optional(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "revised_prompt": "revisedPrompt",
  });
});

/** @internal */
export type ImageData$Outbound = {
  revised_prompt?: string | null | undefined;
  url: string;
};

/** @internal */
export const ImageData$outboundSchema: z.ZodType<
  ImageData$Outbound,
  z.ZodTypeDef,
  ImageData
> = z.object({
  revisedPrompt: z.nullable(z.string()).optional(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    revisedPrompt: "revised_prompt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageData$ {
  /** @deprecated use `ImageData$inboundSchema` instead. */
  export const inboundSchema = ImageData$inboundSchema;
  /** @deprecated use `ImageData$outboundSchema` instead. */
  export const outboundSchema = ImageData$outboundSchema;
  /** @deprecated use `ImageData$Outbound` instead. */
  export type Outbound = ImageData$Outbound;
}

export function imageDataToJSON(imageData: ImageData): string {
  return JSON.stringify(ImageData$outboundSchema.parse(imageData));
}

export function imageDataFromJSON(
  jsonString: string,
): SafeParseResult<ImageData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageData' from JSON`,
  );
}
