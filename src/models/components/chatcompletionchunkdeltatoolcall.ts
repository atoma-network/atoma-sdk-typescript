/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionChunkDeltaToolCallFunction,
  ChatCompletionChunkDeltaToolCallFunction$inboundSchema,
  ChatCompletionChunkDeltaToolCallFunction$Outbound,
  ChatCompletionChunkDeltaToolCallFunction$outboundSchema,
} from "./chatcompletionchunkdeltatoolcallfunction.js";

/**
 * Represents the chat completion chunk delta tool call.
 *
 * @remarks
 *
 * This is used to represent the chat completion chunk delta tool call in the chat completion request.
 * It can be either a chat completion chunk delta tool call or a chat completion chunk delta tool call function.
 */
export type ChatCompletionChunkDeltaToolCall = {
  function?: ChatCompletionChunkDeltaToolCallFunction | null | undefined;
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The index of the tool call.
   */
  index: number;
  /**
   * The type of the tool call.
   */
  type: string;
};

/** @internal */
export const ChatCompletionChunkDeltaToolCall$inboundSchema: z.ZodType<
  ChatCompletionChunkDeltaToolCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  function: z.nullable(ChatCompletionChunkDeltaToolCallFunction$inboundSchema)
    .optional(),
  id: z.string(),
  index: z.number().int(),
  type: z.string(),
});

/** @internal */
export type ChatCompletionChunkDeltaToolCall$Outbound = {
  function?:
    | ChatCompletionChunkDeltaToolCallFunction$Outbound
    | null
    | undefined;
  id: string;
  index: number;
  type: string;
};

/** @internal */
export const ChatCompletionChunkDeltaToolCall$outboundSchema: z.ZodType<
  ChatCompletionChunkDeltaToolCall$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunkDeltaToolCall
> = z.object({
  function: z.nullable(ChatCompletionChunkDeltaToolCallFunction$outboundSchema)
    .optional(),
  id: z.string(),
  index: z.number().int(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunkDeltaToolCall$ {
  /** @deprecated use `ChatCompletionChunkDeltaToolCall$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunkDeltaToolCall$inboundSchema;
  /** @deprecated use `ChatCompletionChunkDeltaToolCall$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunkDeltaToolCall$outboundSchema;
  /** @deprecated use `ChatCompletionChunkDeltaToolCall$Outbound` instead. */
  export type Outbound = ChatCompletionChunkDeltaToolCall$Outbound;
}

export function chatCompletionChunkDeltaToolCallToJSON(
  chatCompletionChunkDeltaToolCall: ChatCompletionChunkDeltaToolCall,
): string {
  return JSON.stringify(
    ChatCompletionChunkDeltaToolCall$outboundSchema.parse(
      chatCompletionChunkDeltaToolCall,
    ),
  );
}

export function chatCompletionChunkDeltaToolCallFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunkDeltaToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunkDeltaToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunkDeltaToolCall' from JSON`,
  );
}
