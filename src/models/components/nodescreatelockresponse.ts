/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The response body for selecting a node's public key for encryption
 *
 * @remarks
 * from a client. The client will use the provided public key to encrypt
 * the request and send it back to the proxy. The proxy will then route this
 * request to the selected node.
 */
export type NodesCreateLockResponse = {
  /**
   * The node small id for the selected node
   */
  nodeSmallId: number;
  /**
   * The public key for the selected node, base64 encoded
   */
  publicKey: string;
  /**
   * Transaction digest for the transaction that acquires the stack entry, if any
   */
  stackEntryDigest?: string | null | undefined;
  /**
   * The stack small id to which an available stack entry was acquired, for the selected node
   */
  stackSmallId: number;
};

/** @internal */
export const NodesCreateLockResponse$inboundSchema: z.ZodType<
  NodesCreateLockResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  node_small_id: z.number().int(),
  public_key: z.string(),
  stack_entry_digest: z.nullable(z.string()).optional(),
  stack_small_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "node_small_id": "nodeSmallId",
    "public_key": "publicKey",
    "stack_entry_digest": "stackEntryDigest",
    "stack_small_id": "stackSmallId",
  });
});

/** @internal */
export type NodesCreateLockResponse$Outbound = {
  node_small_id: number;
  public_key: string;
  stack_entry_digest?: string | null | undefined;
  stack_small_id: number;
};

/** @internal */
export const NodesCreateLockResponse$outboundSchema: z.ZodType<
  NodesCreateLockResponse$Outbound,
  z.ZodTypeDef,
  NodesCreateLockResponse
> = z.object({
  nodeSmallId: z.number().int(),
  publicKey: z.string(),
  stackEntryDigest: z.nullable(z.string()).optional(),
  stackSmallId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    nodeSmallId: "node_small_id",
    publicKey: "public_key",
    stackEntryDigest: "stack_entry_digest",
    stackSmallId: "stack_small_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NodesCreateLockResponse$ {
  /** @deprecated use `NodesCreateLockResponse$inboundSchema` instead. */
  export const inboundSchema = NodesCreateLockResponse$inboundSchema;
  /** @deprecated use `NodesCreateLockResponse$outboundSchema` instead. */
  export const outboundSchema = NodesCreateLockResponse$outboundSchema;
  /** @deprecated use `NodesCreateLockResponse$Outbound` instead. */
  export type Outbound = NodesCreateLockResponse$Outbound;
}

export function nodesCreateLockResponseToJSON(
  nodesCreateLockResponse: NodesCreateLockResponse,
): string {
  return JSON.stringify(
    NodesCreateLockResponse$outboundSchema.parse(nodesCreateLockResponse),
  );
}

export function nodesCreateLockResponseFromJSON(
  jsonString: string,
): SafeParseResult<NodesCreateLockResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NodesCreateLockResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NodesCreateLockResponse' from JSON`,
  );
}
