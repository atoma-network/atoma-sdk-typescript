/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatCompletionChunkDelta = {
  /**
   * The content of the message, if present in this chunk.
   */
  content?: string | null | undefined;
  /**
   * The function call information, if present in this chunk.
   */
  functionCall?: any | undefined;
  /**
   * The role of the message author, if present in this chunk.
   */
  role?: string | null | undefined;
  /**
   * The tool calls information, if present in this chunk.
   */
  toolCalls?: Array<any> | null | undefined;
};

/** @internal */
export const ChatCompletionChunkDelta$inboundSchema: z.ZodType<
  ChatCompletionChunkDelta,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  function_call: z.any().optional(),
  role: z.nullable(z.string()).optional(),
  tool_calls: z.nullable(z.array(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "function_call": "functionCall",
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatCompletionChunkDelta$Outbound = {
  content?: string | null | undefined;
  function_call?: any | undefined;
  role?: string | null | undefined;
  tool_calls?: Array<any> | null | undefined;
};

/** @internal */
export const ChatCompletionChunkDelta$outboundSchema: z.ZodType<
  ChatCompletionChunkDelta$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunkDelta
> = z.object({
  content: z.nullable(z.string()).optional(),
  functionCall: z.any().optional(),
  role: z.nullable(z.string()).optional(),
  toolCalls: z.nullable(z.array(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    functionCall: "function_call",
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunkDelta$ {
  /** @deprecated use `ChatCompletionChunkDelta$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunkDelta$inboundSchema;
  /** @deprecated use `ChatCompletionChunkDelta$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunkDelta$outboundSchema;
  /** @deprecated use `ChatCompletionChunkDelta$Outbound` instead. */
  export type Outbound = ChatCompletionChunkDelta$Outbound;
}

export function chatCompletionChunkDeltaToJSON(
  chatCompletionChunkDelta: ChatCompletionChunkDelta,
): string {
  return JSON.stringify(
    ChatCompletionChunkDelta$outboundSchema.parse(chatCompletionChunkDelta),
  );
}

export function chatCompletionChunkDeltaFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunkDelta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunkDelta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunkDelta' from JSON`,
  );
}
