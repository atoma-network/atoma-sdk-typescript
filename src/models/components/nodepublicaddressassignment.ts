/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents the payload for the node public address registration request.
 *
 * @remarks
 *
 * This struct represents the payload for the node public address registration request.
 */
export type NodePublicAddressAssignment = {
  /**
   * The country of the node
   */
  country: string;
  /**
   * Unique small integer identifier for the node
   */
  nodeSmallId: number;
  /**
   * The public address of the node
   */
  publicAddress: string;
};

/** @internal */
export const NodePublicAddressAssignment$inboundSchema: z.ZodType<
  NodePublicAddressAssignment,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string(),
  node_small_id: z.number().int(),
  public_address: z.string(),
}).transform((v) => {
  return remap$(v, {
    "node_small_id": "nodeSmallId",
    "public_address": "publicAddress",
  });
});

/** @internal */
export type NodePublicAddressAssignment$Outbound = {
  country: string;
  node_small_id: number;
  public_address: string;
};

/** @internal */
export const NodePublicAddressAssignment$outboundSchema: z.ZodType<
  NodePublicAddressAssignment$Outbound,
  z.ZodTypeDef,
  NodePublicAddressAssignment
> = z.object({
  country: z.string(),
  nodeSmallId: z.number().int(),
  publicAddress: z.string(),
}).transform((v) => {
  return remap$(v, {
    nodeSmallId: "node_small_id",
    publicAddress: "public_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NodePublicAddressAssignment$ {
  /** @deprecated use `NodePublicAddressAssignment$inboundSchema` instead. */
  export const inboundSchema = NodePublicAddressAssignment$inboundSchema;
  /** @deprecated use `NodePublicAddressAssignment$outboundSchema` instead. */
  export const outboundSchema = NodePublicAddressAssignment$outboundSchema;
  /** @deprecated use `NodePublicAddressAssignment$Outbound` instead. */
  export type Outbound = NodePublicAddressAssignment$Outbound;
}

export function nodePublicAddressAssignmentToJSON(
  nodePublicAddressAssignment: NodePublicAddressAssignment,
): string {
  return JSON.stringify(
    NodePublicAddressAssignment$outboundSchema.parse(
      nodePublicAddressAssignment,
    ),
  );
}

export function nodePublicAddressAssignmentFromJSON(
  jsonString: string,
): SafeParseResult<NodePublicAddressAssignment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NodePublicAddressAssignment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NodePublicAddressAssignment' from JSON`,
  );
}
