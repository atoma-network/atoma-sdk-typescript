/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionNamedToolChoiceParam,
  ChatCompletionNamedToolChoiceParam$inboundSchema,
  ChatCompletionNamedToolChoiceParam$Outbound,
  ChatCompletionNamedToolChoiceParam$outboundSchema,
} from "./chatcompletionnamedtoolchoiceparam.js";
import {
  ToolChoiceLiteral,
  ToolChoiceLiteral$inboundSchema,
  ToolChoiceLiteral$outboundSchema,
} from "./toolchoiceliteral.js";

/**
 * A tool choice that can be used in a chat completion.
 *
 * @remarks
 *
 * This is used to represent the tool choice in the chat completion request.
 * It can be either a literal tool choice or a named tool choice.
 */
export type ToolChoice = ChatCompletionNamedToolChoiceParam | ToolChoiceLiteral;

/** @internal */
export const ToolChoice$inboundSchema: z.ZodType<
  ToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionNamedToolChoiceParam$inboundSchema,
  ToolChoiceLiteral$inboundSchema,
]);

/** @internal */
export type ToolChoice$Outbound =
  | ChatCompletionNamedToolChoiceParam$Outbound
  | string;

/** @internal */
export const ToolChoice$outboundSchema: z.ZodType<
  ToolChoice$Outbound,
  z.ZodTypeDef,
  ToolChoice
> = z.union([
  ChatCompletionNamedToolChoiceParam$outboundSchema,
  ToolChoiceLiteral$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoice$ {
  /** @deprecated use `ToolChoice$inboundSchema` instead. */
  export const inboundSchema = ToolChoice$inboundSchema;
  /** @deprecated use `ToolChoice$outboundSchema` instead. */
  export const outboundSchema = ToolChoice$outboundSchema;
  /** @deprecated use `ToolChoice$Outbound` instead. */
  export type Outbound = ToolChoice$Outbound;
}

export function toolChoiceToJSON(toolChoice: ToolChoice): string {
  return JSON.stringify(ToolChoice$outboundSchema.parse(toolChoice));
}

export function toolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoice' from JSON`,
  );
}
