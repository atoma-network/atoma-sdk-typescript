/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionChunk,
  ChatCompletionChunk$inboundSchema,
  ChatCompletionChunk$Outbound,
  ChatCompletionChunk$outboundSchema,
} from "./chatcompletionchunk.js";

/**
 * Represents the chat completion stream response.
 *
 * @remarks
 *
 * This is used to represent the chat completion stream response in the chat completion request.
 * It can be either a chat completion chunk or a chat completion stream.
 */
export type ChatCompletionStreamResponse = {
  /**
   * Represents the chat completion chunk.
   *
   * @remarks
   *
   * This is used to represent the chat completion chunk in the chat completion request.
   * It can be either a chat completion chunk or a chat completion chunk choice.
   */
  data: ChatCompletionChunk;
};

/** @internal */
export const ChatCompletionStreamResponse$inboundSchema: z.ZodType<
  ChatCompletionStreamResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(ChatCompletionChunk$inboundSchema),
});

/** @internal */
export type ChatCompletionStreamResponse$Outbound = {
  data: ChatCompletionChunk$Outbound;
};

/** @internal */
export const ChatCompletionStreamResponse$outboundSchema: z.ZodType<
  ChatCompletionStreamResponse$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamResponse
> = z.object({
  data: ChatCompletionChunk$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamResponse$ {
  /** @deprecated use `ChatCompletionStreamResponse$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamResponse$inboundSchema;
  /** @deprecated use `ChatCompletionStreamResponse$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreamResponse$outboundSchema;
  /** @deprecated use `ChatCompletionStreamResponse$Outbound` instead. */
  export type Outbound = ChatCompletionStreamResponse$Outbound;
}

export function chatCompletionStreamResponseToJSON(
  chatCompletionStreamResponse: ChatCompletionStreamResponse,
): string {
  return JSON.stringify(
    ChatCompletionStreamResponse$outboundSchema.parse(
      chatCompletionStreamResponse,
    ),
  );
}

export function chatCompletionStreamResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStreamResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionStreamResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStreamResponse' from JSON`,
  );
}
