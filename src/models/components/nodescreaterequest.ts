/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NodePublicAddressAssignment,
  NodePublicAddressAssignment$inboundSchema,
  NodePublicAddressAssignment$Outbound,
  NodePublicAddressAssignment$outboundSchema,
} from "./nodepublicaddressassignment.js";

/**
 * Represents the payload for the node public address registration request.
 */
export type NodesCreateRequest = {
  /**
   * Represents the payload for the node public address registration request.
   *
   * @remarks
   *
   * This struct represents the payload for the node public address registration request.
   */
  data: NodePublicAddressAssignment;
  /**
   * The signature of the data base 64 encoded
   */
  signature: string;
};

/** @internal */
export const NodesCreateRequest$inboundSchema: z.ZodType<
  NodesCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: NodePublicAddressAssignment$inboundSchema,
  signature: z.string(),
});

/** @internal */
export type NodesCreateRequest$Outbound = {
  data: NodePublicAddressAssignment$Outbound;
  signature: string;
};

/** @internal */
export const NodesCreateRequest$outboundSchema: z.ZodType<
  NodesCreateRequest$Outbound,
  z.ZodTypeDef,
  NodesCreateRequest
> = z.object({
  data: NodePublicAddressAssignment$outboundSchema,
  signature: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NodesCreateRequest$ {
  /** @deprecated use `NodesCreateRequest$inboundSchema` instead. */
  export const inboundSchema = NodesCreateRequest$inboundSchema;
  /** @deprecated use `NodesCreateRequest$outboundSchema` instead. */
  export const outboundSchema = NodesCreateRequest$outboundSchema;
  /** @deprecated use `NodesCreateRequest$Outbound` instead. */
  export type Outbound = NodesCreateRequest$Outbound;
}

export function nodesCreateRequestToJSON(
  nodesCreateRequest: NodesCreateRequest,
): string {
  return JSON.stringify(
    NodesCreateRequest$outboundSchema.parse(nodesCreateRequest),
  );
}

export function nodesCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<NodesCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NodesCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NodesCreateRequest' from JSON`,
  );
}
