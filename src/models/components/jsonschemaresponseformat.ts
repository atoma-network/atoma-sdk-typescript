/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The format to return the response in.
 *
 * @remarks
 *
 * This is used to represent the format to return the response in in the chat completion request.
 * It can be either text, json_object, or json_schema.
 */
export type JsonSchemaResponseFormat = {
  /**
   * The description of the response format.
   */
  description?: string | null | undefined;
  /**
   * The name of the response format.
   */
  name: string;
  /**
   * The JSON schema of the response format.
   */
  schema?: any | undefined;
  /**
   * Whether to strictly validate the JSON schema.
   */
  strict?: boolean | null | undefined;
};

/** @internal */
export const JsonSchemaResponseFormat$inboundSchema: z.ZodType<
  JsonSchemaResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.string(),
  schema: z.any().optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type JsonSchemaResponseFormat$Outbound = {
  description?: string | null | undefined;
  name: string;
  schema?: any | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const JsonSchemaResponseFormat$outboundSchema: z.ZodType<
  JsonSchemaResponseFormat$Outbound,
  z.ZodTypeDef,
  JsonSchemaResponseFormat
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.string(),
  schema: z.any().optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonSchemaResponseFormat$ {
  /** @deprecated use `JsonSchemaResponseFormat$inboundSchema` instead. */
  export const inboundSchema = JsonSchemaResponseFormat$inboundSchema;
  /** @deprecated use `JsonSchemaResponseFormat$outboundSchema` instead. */
  export const outboundSchema = JsonSchemaResponseFormat$outboundSchema;
  /** @deprecated use `JsonSchemaResponseFormat$Outbound` instead. */
  export type Outbound = JsonSchemaResponseFormat$Outbound;
}

export function jsonSchemaResponseFormatToJSON(
  jsonSchemaResponseFormat: JsonSchemaResponseFormat,
): string {
  return JSON.stringify(
    JsonSchemaResponseFormat$outboundSchema.parse(jsonSchemaResponseFormat),
  );
}

export function jsonSchemaResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<JsonSchemaResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JsonSchemaResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JsonSchemaResponseFormat' from JSON`,
  );
}
