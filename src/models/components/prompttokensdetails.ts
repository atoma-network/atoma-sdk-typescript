/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PromptTokensDetails = {
  /**
   * The number of audio tokens
   */
  audioTokens?: number;
  /**
   * The number of cached tokens
   */
  cachedTokens?: number;
};

/** @internal */
export const PromptTokensDetails$inboundSchema: z.ZodType<
  PromptTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  audio_tokens: z.number().int(),
  cached_tokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "audio_tokens": "audioTokens",
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type PromptTokensDetails$Outbound = {
  audio_tokens: number;
  cached_tokens: number;
};

/** @internal */
export const PromptTokensDetails$outboundSchema: z.ZodType<
  PromptTokensDetails$Outbound,
  z.ZodTypeDef,
  PromptTokensDetails
> = z.object({
  audioTokens: z.number().int(),
  cachedTokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    audioTokens: "audio_tokens",
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTokensDetails$ {
  /** @deprecated use `PromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema = PromptTokensDetails$inboundSchema;
  /** @deprecated use `PromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema = PromptTokensDetails$outboundSchema;
  /** @deprecated use `PromptTokensDetails$Outbound` instead. */
  export type Outbound = PromptTokensDetails$Outbound;
}

export function promptTokensDetailsToJSON(
  promptTokensDetails: PromptTokensDetails,
): string {
  return JSON.stringify(
    PromptTokensDetails$outboundSchema.parse(promptTokensDetails),
  );
}

export function promptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PromptTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptTokensDetails' from JSON`,
  );
}
