/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionLogProb,
  ChatCompletionLogProb$inboundSchema,
  ChatCompletionLogProb$Outbound,
  ChatCompletionLogProb$outboundSchema,
} from "./chatcompletionlogprob.js";

/**
 * Represents the chat completion log probs content.
 *
 * @remarks
 *
 * This is used to represent the chat completion log probs content in the chat completion request.
 * It can be either a chat completion log probs content or a chat completion log probs content choice.
 */
export type ChatCompletionLogProbsContent = {
  topLogprobs: Array<ChatCompletionLogProb>;
};

/** @internal */
export const ChatCompletionLogProbsContent$inboundSchema: z.ZodType<
  ChatCompletionLogProbsContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  top_logprobs: z.array(ChatCompletionLogProb$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ChatCompletionLogProbsContent$Outbound = {
  top_logprobs: Array<ChatCompletionLogProb$Outbound>;
};

/** @internal */
export const ChatCompletionLogProbsContent$outboundSchema: z.ZodType<
  ChatCompletionLogProbsContent$Outbound,
  z.ZodTypeDef,
  ChatCompletionLogProbsContent
> = z.object({
  topLogprobs: z.array(ChatCompletionLogProb$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionLogProbsContent$ {
  /** @deprecated use `ChatCompletionLogProbsContent$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionLogProbsContent$inboundSchema;
  /** @deprecated use `ChatCompletionLogProbsContent$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionLogProbsContent$outboundSchema;
  /** @deprecated use `ChatCompletionLogProbsContent$Outbound` instead. */
  export type Outbound = ChatCompletionLogProbsContent$Outbound;
}

export function chatCompletionLogProbsContentToJSON(
  chatCompletionLogProbsContent: ChatCompletionLogProbsContent,
): string {
  return JSON.stringify(
    ChatCompletionLogProbsContent$outboundSchema.parse(
      chatCompletionLogProbsContent,
    ),
  );
}

export function chatCompletionLogProbsContentFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionLogProbsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionLogProbsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionLogProbsContent' from JSON`,
  );
}
