/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompletionChoice,
  CompletionChoice$inboundSchema,
  CompletionChoice$Outbound,
  CompletionChoice$outboundSchema,
} from "./completionchoice.js";

export type CompletionsStreamResponse = {
  /**
   * Array of completion choices response
   */
  choices: Array<CompletionChoice>;
  /**
   * The creation time of the request
   */
  created: number;
  /**
   * The ID of the request
   */
  id: string;
  /**
   * The model used for the request
   */
  model: string;
  /**
   * The object type
   */
  object: string;
  /**
   * The system fingerprint
   */
  systemFingerprint: string;
};

/** @internal */
export const CompletionsStreamResponse$inboundSchema: z.ZodType<
  CompletionsStreamResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(CompletionChoice$inboundSchema),
  created: z.number().int(),
  id: z.string(),
  model: z.string(),
  object: z.string(),
  system_fingerprint: z.string(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type CompletionsStreamResponse$Outbound = {
  choices: Array<CompletionChoice$Outbound>;
  created: number;
  id: string;
  model: string;
  object: string;
  system_fingerprint: string;
};

/** @internal */
export const CompletionsStreamResponse$outboundSchema: z.ZodType<
  CompletionsStreamResponse$Outbound,
  z.ZodTypeDef,
  CompletionsStreamResponse
> = z.object({
  choices: z.array(CompletionChoice$outboundSchema),
  created: z.number().int(),
  id: z.string(),
  model: z.string(),
  object: z.string(),
  systemFingerprint: z.string(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionsStreamResponse$ {
  /** @deprecated use `CompletionsStreamResponse$inboundSchema` instead. */
  export const inboundSchema = CompletionsStreamResponse$inboundSchema;
  /** @deprecated use `CompletionsStreamResponse$outboundSchema` instead. */
  export const outboundSchema = CompletionsStreamResponse$outboundSchema;
  /** @deprecated use `CompletionsStreamResponse$Outbound` instead. */
  export type Outbound = CompletionsStreamResponse$Outbound;
}

export function completionsStreamResponseToJSON(
  completionsStreamResponse: CompletionsStreamResponse,
): string {
  return JSON.stringify(
    CompletionsStreamResponse$outboundSchema.parse(completionsStreamResponse),
  );
}

export function completionsStreamResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompletionsStreamResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionsStreamResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionsStreamResponse' from JSON`,
  );
}
