/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StopReason2 = {
  string: string;
};

export type StopReason1 = {
  int: number;
};

/**
 * Represents the stop reason.
 *
 * @remarks
 *
 * This is used to represent the stop reason in the chat completion request.
 * It can be either a stop reason or a stop reason choice.
 */
export type StopReasonUnion = StopReason1 | StopReason2;

/** @internal */
export const StopReason2$inboundSchema: z.ZodType<
  StopReason2,
  z.ZodTypeDef,
  unknown
> = z.object({
  String: z.string(),
}).transform((v) => {
  return remap$(v, {
    "String": "string",
  });
});

/** @internal */
export type StopReason2$Outbound = {
  String: string;
};

/** @internal */
export const StopReason2$outboundSchema: z.ZodType<
  StopReason2$Outbound,
  z.ZodTypeDef,
  StopReason2
> = z.object({
  string: z.string(),
}).transform((v) => {
  return remap$(v, {
    string: "String",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopReason2$ {
  /** @deprecated use `StopReason2$inboundSchema` instead. */
  export const inboundSchema = StopReason2$inboundSchema;
  /** @deprecated use `StopReason2$outboundSchema` instead. */
  export const outboundSchema = StopReason2$outboundSchema;
  /** @deprecated use `StopReason2$Outbound` instead. */
  export type Outbound = StopReason2$Outbound;
}

export function stopReason2ToJSON(stopReason2: StopReason2): string {
  return JSON.stringify(StopReason2$outboundSchema.parse(stopReason2));
}

export function stopReason2FromJSON(
  jsonString: string,
): SafeParseResult<StopReason2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopReason2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopReason2' from JSON`,
  );
}

/** @internal */
export const StopReason1$inboundSchema: z.ZodType<
  StopReason1,
  z.ZodTypeDef,
  unknown
> = z.object({
  Int: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "Int": "int",
  });
});

/** @internal */
export type StopReason1$Outbound = {
  Int: number;
};

/** @internal */
export const StopReason1$outboundSchema: z.ZodType<
  StopReason1$Outbound,
  z.ZodTypeDef,
  StopReason1
> = z.object({
  int: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    int: "Int",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopReason1$ {
  /** @deprecated use `StopReason1$inboundSchema` instead. */
  export const inboundSchema = StopReason1$inboundSchema;
  /** @deprecated use `StopReason1$outboundSchema` instead. */
  export const outboundSchema = StopReason1$outboundSchema;
  /** @deprecated use `StopReason1$Outbound` instead. */
  export type Outbound = StopReason1$Outbound;
}

export function stopReason1ToJSON(stopReason1: StopReason1): string {
  return JSON.stringify(StopReason1$outboundSchema.parse(stopReason1));
}

export function stopReason1FromJSON(
  jsonString: string,
): SafeParseResult<StopReason1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopReason1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopReason1' from JSON`,
  );
}

/** @internal */
export const StopReasonUnion$inboundSchema: z.ZodType<
  StopReasonUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => StopReason1$inboundSchema),
  z.lazy(() => StopReason2$inboundSchema),
]);

/** @internal */
export type StopReasonUnion$Outbound =
  | StopReason1$Outbound
  | StopReason2$Outbound;

/** @internal */
export const StopReasonUnion$outboundSchema: z.ZodType<
  StopReasonUnion$Outbound,
  z.ZodTypeDef,
  StopReasonUnion
> = z.union([
  z.lazy(() => StopReason1$outboundSchema),
  z.lazy(() => StopReason2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopReasonUnion$ {
  /** @deprecated use `StopReasonUnion$inboundSchema` instead. */
  export const inboundSchema = StopReasonUnion$inboundSchema;
  /** @deprecated use `StopReasonUnion$outboundSchema` instead. */
  export const outboundSchema = StopReasonUnion$outboundSchema;
  /** @deprecated use `StopReasonUnion$Outbound` instead. */
  export type Outbound = StopReasonUnion$Outbound;
}

export function stopReasonUnionToJSON(
  stopReasonUnion: StopReasonUnion,
): string {
  return JSON.stringify(StopReasonUnion$outboundSchema.parse(stopReasonUnion));
}

export function stopReasonUnionFromJSON(
  jsonString: string,
): SafeParseResult<StopReasonUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopReasonUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopReasonUnion' from JSON`,
  );
}
