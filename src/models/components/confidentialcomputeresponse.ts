/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Usage,
  Usage$inboundSchema,
  Usage$Outbound,
  Usage$outboundSchema,
} from "./usage.js";

/**
 * Represents a response from a confidential compute request
 */
export type ConfidentialComputeResponse = {
  /**
   * Encrypted response body (base64 encoded)
   */
  ciphertext: string;
  /**
   * Nonce used for encryption (base64 encoded)
   */
  nonce: string;
  /**
   * Hash of the response body (base64 encoded)
   */
  responseHash?: string | null | undefined;
  /**
   * Signature of the response body (base64 encoded)
   */
  signature?: string | null | undefined;
  usage?: Usage | null | undefined;
};

/** @internal */
export const ConfidentialComputeResponse$inboundSchema: z.ZodType<
  ConfidentialComputeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ciphertext: z.string(),
  nonce: z.string(),
  response_hash: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  usage: z.nullable(Usage$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_hash": "responseHash",
  });
});

/** @internal */
export type ConfidentialComputeResponse$Outbound = {
  ciphertext: string;
  nonce: string;
  response_hash?: string | null | undefined;
  signature?: string | null | undefined;
  usage?: Usage$Outbound | null | undefined;
};

/** @internal */
export const ConfidentialComputeResponse$outboundSchema: z.ZodType<
  ConfidentialComputeResponse$Outbound,
  z.ZodTypeDef,
  ConfidentialComputeResponse
> = z.object({
  ciphertext: z.string(),
  nonce: z.string(),
  responseHash: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  usage: z.nullable(Usage$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    responseHash: "response_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfidentialComputeResponse$ {
  /** @deprecated use `ConfidentialComputeResponse$inboundSchema` instead. */
  export const inboundSchema = ConfidentialComputeResponse$inboundSchema;
  /** @deprecated use `ConfidentialComputeResponse$outboundSchema` instead. */
  export const outboundSchema = ConfidentialComputeResponse$outboundSchema;
  /** @deprecated use `ConfidentialComputeResponse$Outbound` instead. */
  export type Outbound = ConfidentialComputeResponse$Outbound;
}

export function confidentialComputeResponseToJSON(
  confidentialComputeResponse: ConfidentialComputeResponse,
): string {
  return JSON.stringify(
    ConfidentialComputeResponse$outboundSchema.parse(
      confidentialComputeResponse,
    ),
  );
}

export function confidentialComputeResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConfidentialComputeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfidentialComputeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfidentialComputeResponse' from JSON`,
  );
}
