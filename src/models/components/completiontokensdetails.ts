/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The details of the completion tokens
 */
export type CompletionTokensDetails = {
  /**
   * The number of tokens in the completion
   */
  acceptedPredictionTokens: number;
  /**
   * The number of audio tokens
   */
  audioTokens: number;
  /**
   * The number of reasoning tokens
   */
  reasoningTokens: number;
  /**
   * The number of rejected prediction tokens
   */
  rejectedPredictionTokens: number;
};

/** @internal */
export const CompletionTokensDetails$inboundSchema: z.ZodType<
  CompletionTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  accepted_prediction_tokens: z.number().int(),
  audio_tokens: z.number().int(),
  reasoning_tokens: z.number().int(),
  rejected_prediction_tokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "accepted_prediction_tokens": "acceptedPredictionTokens",
    "audio_tokens": "audioTokens",
    "reasoning_tokens": "reasoningTokens",
    "rejected_prediction_tokens": "rejectedPredictionTokens",
  });
});

/** @internal */
export type CompletionTokensDetails$Outbound = {
  accepted_prediction_tokens: number;
  audio_tokens: number;
  reasoning_tokens: number;
  rejected_prediction_tokens: number;
};

/** @internal */
export const CompletionTokensDetails$outboundSchema: z.ZodType<
  CompletionTokensDetails$Outbound,
  z.ZodTypeDef,
  CompletionTokensDetails
> = z.object({
  acceptedPredictionTokens: z.number().int(),
  audioTokens: z.number().int(),
  reasoningTokens: z.number().int(),
  rejectedPredictionTokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    acceptedPredictionTokens: "accepted_prediction_tokens",
    audioTokens: "audio_tokens",
    reasoningTokens: "reasoning_tokens",
    rejectedPredictionTokens: "rejected_prediction_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionTokensDetails$ {
  /** @deprecated use `CompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema = CompletionTokensDetails$inboundSchema;
  /** @deprecated use `CompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema = CompletionTokensDetails$outboundSchema;
  /** @deprecated use `CompletionTokensDetails$Outbound` instead. */
  export type Outbound = CompletionTokensDetails$Outbound;
}

export function completionTokensDetailsToJSON(
  completionTokensDetails: CompletionTokensDetails,
): string {
  return JSON.stringify(
    CompletionTokensDetails$outboundSchema.parse(completionTokensDetails),
  );
}

export function completionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CompletionTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionTokensDetails' from JSON`,
  );
}
