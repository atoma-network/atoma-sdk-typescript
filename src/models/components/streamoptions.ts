/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the stream options for the request.
 */
export type StreamOptions = {
  /**
   * If set, an additional chunk will be streamed before the data: [DONE] message.
   *
   * @remarks
   * The usage field on this chunk shows the token usage statistics for the entire request, and the choices field
   * will always be an empty array. All other chunks will also include a usage field, but with a null value.
   */
  includeUsage?: boolean | null | undefined;
};

/** @internal */
export const StreamOptions$inboundSchema: z.ZodType<
  StreamOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_usage: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "include_usage": "includeUsage",
  });
});

/** @internal */
export type StreamOptions$Outbound = {
  include_usage?: boolean | null | undefined;
};

/** @internal */
export const StreamOptions$outboundSchema: z.ZodType<
  StreamOptions$Outbound,
  z.ZodTypeDef,
  StreamOptions
> = z.object({
  includeUsage: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    includeUsage: "include_usage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamOptions$ {
  /** @deprecated use `StreamOptions$inboundSchema` instead. */
  export const inboundSchema = StreamOptions$inboundSchema;
  /** @deprecated use `StreamOptions$outboundSchema` instead. */
  export const outboundSchema = StreamOptions$outboundSchema;
  /** @deprecated use `StreamOptions$Outbound` instead. */
  export type Outbound = StreamOptions$Outbound;
}

export function streamOptionsToJSON(streamOptions: StreamOptions): string {
  return JSON.stringify(StreamOptions$outboundSchema.parse(streamOptions));
}

export function streamOptionsFromJSON(
  jsonString: string,
): SafeParseResult<StreamOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamOptions' from JSON`,
  );
}
