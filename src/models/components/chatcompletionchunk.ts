/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionChunkChoice,
  ChatCompletionChunkChoice$inboundSchema,
  ChatCompletionChunkChoice$Outbound,
  ChatCompletionChunkChoice$outboundSchema,
} from "./chatcompletionchunkchoice.js";
import {
  CompletionUsage,
  CompletionUsage$inboundSchema,
  CompletionUsage$Outbound,
  CompletionUsage$outboundSchema,
} from "./completionusage.js";

export type ChatCompletionChunk = {
  /**
   * A list of chat completion chunk choices.
   */
  choices: Array<ChatCompletionChunkChoice>;
  /**
   * The Unix timestamp (in seconds) of when the chunk was created.
   */
  created: number;
  /**
   * A unique identifier for the chat completion chunk.
   */
  id: string;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * The system fingerprint for the completion
   */
  systemFingerprint?: string | null | undefined;
  /**
   * Usage statistics for the completion request.
   */
  usage?: CompletionUsage | null | undefined;
  /**
   * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service
   */

  serviceTier?: string | undefined;

  /**
   * The type of the o chunk.
   */
  object?: string;
};

/** @internal */
export const ChatCompletionChunk$inboundSchema: z.ZodType<
  ChatCompletionChunk,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    choices: z.array(ChatCompletionChunkChoice$inboundSchema),
    created: z.number().int(),
    id: z.string(),
    model: z.string(),
    system_fingerprint: z.nullable(z.string()).optional(),
    usage: z.nullable(CompletionUsage$inboundSchema).optional(),
    object: z.string(),
    service_tier: z.string().optional(),
  })
  .transform(
    (v: {
      choices: Array<ChatCompletionChunkChoice>;
      created: number;
      id: string;
      model: string;
      system_fingerprint?: string | null | undefined;
      usage?: CompletionUsage | null | undefined;
      object: string;
      service_tier?: string | undefined;
    }) => {
      return remap$(v, {
        system_fingerprint: "systemFingerprint",
        service_tier: "serviceTier",
      });
    },
  );

/** @internal */
export type ChatCompletionChunk$Outbound = {
  choices: Array<ChatCompletionChunkChoice$Outbound>;
  created: number;
  id: string;
  model: string;
  system_fingerprint?: string | null | undefined;
  usage?: CompletionUsage$Outbound | null | undefined;
};

/** @internal */
export const ChatCompletionChunk$outboundSchema: z.ZodType<
  ChatCompletionChunk$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunk
> = z
  .object({
    choices: z.array(ChatCompletionChunkChoice$outboundSchema),
    created: z.number().int(),
    id: z.string(),
    model: z.string(),
    systemFingerprint: z.nullable(z.string()).optional(),
    usage: z.nullable(CompletionUsage$outboundSchema).optional(),
  })
  .transform(
    (v: {
      choices: Array<ChatCompletionChunkChoice$Outbound>;
      created: number;
      id: string;
      model: string;
      systemFingerprint?: string | null | undefined;
      usage?: CompletionUsage$Outbound | null | undefined;
    }) => {
      return remap$(v, {
        systemFingerprint: "system_fingerprint",
      });
    },
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunk$ {
  /** @deprecated use `ChatCompletionChunk$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunk$inboundSchema;
  /** @deprecated use `ChatCompletionChunk$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunk$outboundSchema;
  /** @deprecated use `ChatCompletionChunk$Outbound` instead. */
  export type Outbound = ChatCompletionChunk$Outbound;
}

export function chatCompletionChunkToJSON(
  chatCompletionChunk: ChatCompletionChunk,
): string {
  return JSON.stringify(
    ChatCompletionChunk$outboundSchema.parse(chatCompletionChunk),
  );
}

export function chatCompletionChunkFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunk' from JSON`,
  );
}
