/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageContentPartImageUrl,
  MessageContentPartImageUrl$inboundSchema,
  MessageContentPartImageUrl$Outbound,
  MessageContentPartImageUrl$outboundSchema,
} from "./messagecontentpartimageurl.js";

export type MessageContentPart2 = {
  /**
   * Represents the image URL of a message content part.
   *
   * @remarks
   *
   * This is used to represent the image URL of a message content part in the chat completion request.
   * It can be either a URL or a base64 encoded image data.
   */
  imageUrl: MessageContentPartImageUrl;
  /**
   * The type of the content part.
   */
  type: string;
};

export type MessageContentPart1 = {
  /**
   * The text content.
   */
  text: string;
  /**
   * The type of the content part.
   */
  type: string;
};

/**
 * Represents a part of a message content.
 *
 * @remarks
 *
 * This is used to represent the content of a message in the chat completion request.
 * It can be either a text or an image.
 */
export type MessageContentPartUnion = MessageContentPart1 | MessageContentPart2;

/** @internal */
export const MessageContentPart2$inboundSchema: z.ZodType<
  MessageContentPart2,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_url: MessageContentPartImageUrl$inboundSchema,
  type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type MessageContentPart2$Outbound = {
  image_url: MessageContentPartImageUrl$Outbound;
  type: string;
};

/** @internal */
export const MessageContentPart2$outboundSchema: z.ZodType<
  MessageContentPart2$Outbound,
  z.ZodTypeDef,
  MessageContentPart2
> = z.object({
  imageUrl: MessageContentPartImageUrl$outboundSchema,
  type: z.string(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentPart2$ {
  /** @deprecated use `MessageContentPart2$inboundSchema` instead. */
  export const inboundSchema = MessageContentPart2$inboundSchema;
  /** @deprecated use `MessageContentPart2$outboundSchema` instead. */
  export const outboundSchema = MessageContentPart2$outboundSchema;
  /** @deprecated use `MessageContentPart2$Outbound` instead. */
  export type Outbound = MessageContentPart2$Outbound;
}

export function messageContentPart2ToJSON(
  messageContentPart2: MessageContentPart2,
): string {
  return JSON.stringify(
    MessageContentPart2$outboundSchema.parse(messageContentPart2),
  );
}

export function messageContentPart2FromJSON(
  jsonString: string,
): SafeParseResult<MessageContentPart2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageContentPart2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageContentPart2' from JSON`,
  );
}

/** @internal */
export const MessageContentPart1$inboundSchema: z.ZodType<
  MessageContentPart1,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  type: z.string(),
});

/** @internal */
export type MessageContentPart1$Outbound = {
  text: string;
  type: string;
};

/** @internal */
export const MessageContentPart1$outboundSchema: z.ZodType<
  MessageContentPart1$Outbound,
  z.ZodTypeDef,
  MessageContentPart1
> = z.object({
  text: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentPart1$ {
  /** @deprecated use `MessageContentPart1$inboundSchema` instead. */
  export const inboundSchema = MessageContentPart1$inboundSchema;
  /** @deprecated use `MessageContentPart1$outboundSchema` instead. */
  export const outboundSchema = MessageContentPart1$outboundSchema;
  /** @deprecated use `MessageContentPart1$Outbound` instead. */
  export type Outbound = MessageContentPart1$Outbound;
}

export function messageContentPart1ToJSON(
  messageContentPart1: MessageContentPart1,
): string {
  return JSON.stringify(
    MessageContentPart1$outboundSchema.parse(messageContentPart1),
  );
}

export function messageContentPart1FromJSON(
  jsonString: string,
): SafeParseResult<MessageContentPart1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageContentPart1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageContentPart1' from JSON`,
  );
}

/** @internal */
export const MessageContentPartUnion$inboundSchema: z.ZodType<
  MessageContentPartUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MessageContentPart1$inboundSchema),
  z.lazy(() => MessageContentPart2$inboundSchema),
]);

/** @internal */
export type MessageContentPartUnion$Outbound =
  | MessageContentPart1$Outbound
  | MessageContentPart2$Outbound;

/** @internal */
export const MessageContentPartUnion$outboundSchema: z.ZodType<
  MessageContentPartUnion$Outbound,
  z.ZodTypeDef,
  MessageContentPartUnion
> = z.union([
  z.lazy(() => MessageContentPart1$outboundSchema),
  z.lazy(() => MessageContentPart2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentPartUnion$ {
  /** @deprecated use `MessageContentPartUnion$inboundSchema` instead. */
  export const inboundSchema = MessageContentPartUnion$inboundSchema;
  /** @deprecated use `MessageContentPartUnion$outboundSchema` instead. */
  export const outboundSchema = MessageContentPartUnion$outboundSchema;
  /** @deprecated use `MessageContentPartUnion$Outbound` instead. */
  export type Outbound = MessageContentPartUnion$Outbound;
}

export function messageContentPartUnionToJSON(
  messageContentPartUnion: MessageContentPartUnion,
): string {
  return JSON.stringify(
    MessageContentPartUnion$outboundSchema.parse(messageContentPartUnion),
  );
}

export function messageContentPartUnionFromJSON(
  jsonString: string,
): SafeParseResult<MessageContentPartUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageContentPartUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageContentPartUnion' from JSON`,
  );
}
