/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request body for creating a node lock
 */
export type NodesCreateLockRequest = {
  /**
   * The number of tokens to be processed for confidential compute
   *
   * @remarks
   * (including input and output tokens)
   */
  maxNumTokens?: number | null | undefined;
  /**
   * The model to lock a node for
   */
  model: string;
  /**
   * An optional timeout period for the locked compute units, in seconds
   */
  timeout?: number | null | undefined;
};

/** @internal */
export const NodesCreateLockRequest$inboundSchema: z.ZodType<
  NodesCreateLockRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_num_tokens: z.nullable(z.number().int()).optional(),
  model: z.string(),
  timeout: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "max_num_tokens": "maxNumTokens",
  });
});

/** @internal */
export type NodesCreateLockRequest$Outbound = {
  max_num_tokens?: number | null | undefined;
  model: string;
  timeout?: number | null | undefined;
};

/** @internal */
export const NodesCreateLockRequest$outboundSchema: z.ZodType<
  NodesCreateLockRequest$Outbound,
  z.ZodTypeDef,
  NodesCreateLockRequest
> = z.object({
  maxNumTokens: z.nullable(z.number().int()).optional(),
  model: z.string(),
  timeout: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    maxNumTokens: "max_num_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NodesCreateLockRequest$ {
  /** @deprecated use `NodesCreateLockRequest$inboundSchema` instead. */
  export const inboundSchema = NodesCreateLockRequest$inboundSchema;
  /** @deprecated use `NodesCreateLockRequest$outboundSchema` instead. */
  export const outboundSchema = NodesCreateLockRequest$outboundSchema;
  /** @deprecated use `NodesCreateLockRequest$Outbound` instead. */
  export type Outbound = NodesCreateLockRequest$Outbound;
}

export function nodesCreateLockRequestToJSON(
  nodesCreateLockRequest: NodesCreateLockRequest,
): string {
  return JSON.stringify(
    NodesCreateLockRequest$outboundSchema.parse(nodesCreateLockRequest),
  );
}

export function nodesCreateLockRequestFromJSON(
  jsonString: string,
): SafeParseResult<NodesCreateLockRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NodesCreateLockRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NodesCreateLockRequest' from JSON`,
  );
}
