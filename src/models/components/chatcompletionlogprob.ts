/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents the chat completion log prob.
 *
 * @remarks
 *
 * This is used to represent the chat completion log prob in the chat completion request.
 * It can be either a chat completion log prob or a chat completion log prob choice.
 */
export type ChatCompletionLogProb = {
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   *
   * @remarks
   * Useful in instances where characters are represented by multiple tokens and their byte
   * representations must be combined to generate the correct text representation.
   * Can be null if there is no bytes representation for the token.
   */
  bytes?: Array<number> | null | undefined;
  /**
   * The log prob of the chat completion.
   */
  logprob: number;
  /**
   * The token of the chat completion.
   */
  token: string;
};

/** @internal */
export const ChatCompletionLogProb$inboundSchema: z.ZodType<
  ChatCompletionLogProb,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.nullable(z.array(z.number().int())).optional(),
  logprob: z.number(),
  token: z.string(),
});

/** @internal */
export type ChatCompletionLogProb$Outbound = {
  bytes?: Array<number> | null | undefined;
  logprob: number;
  token: string;
};

/** @internal */
export const ChatCompletionLogProb$outboundSchema: z.ZodType<
  ChatCompletionLogProb$Outbound,
  z.ZodTypeDef,
  ChatCompletionLogProb
> = z.object({
  bytes: z.nullable(z.array(z.number().int())).optional(),
  logprob: z.number(),
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionLogProb$ {
  /** @deprecated use `ChatCompletionLogProb$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionLogProb$inboundSchema;
  /** @deprecated use `ChatCompletionLogProb$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionLogProb$outboundSchema;
  /** @deprecated use `ChatCompletionLogProb$Outbound` instead. */
  export type Outbound = ChatCompletionLogProb$Outbound;
}

export function chatCompletionLogProbToJSON(
  chatCompletionLogProb: ChatCompletionLogProb,
): string {
  return JSON.stringify(
    ChatCompletionLogProb$outboundSchema.parse(chatCompletionLogProb),
  );
}

export function chatCompletionLogProbFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionLogProb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionLogProb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionLogProb' from JSON`,
  );
}
