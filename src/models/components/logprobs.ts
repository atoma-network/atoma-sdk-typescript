/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LogProbs = {
  /**
   * The text offset of the tokens
   */
  textOffset: Array<number>;
  /**
   * The log probabilities of the tokens
   */
  tokenLogprobs: Array<number>;
  /**
   * The tokens
   */
  tokens: Array<string>;
  /**
   * The top log probabilities
   */
  topLogprobs: Array<{ [k: string]: number }>;
};

/** @internal */
export const LogProbs$inboundSchema: z.ZodType<
  LogProbs,
  z.ZodTypeDef,
  unknown
> = z.object({
  text_offset: z.array(z.number().int()),
  token_logprobs: z.array(z.number()),
  tokens: z.array(z.string()),
  top_logprobs: z.array(z.record(z.number())),
}).transform((v) => {
  return remap$(v, {
    "text_offset": "textOffset",
    "token_logprobs": "tokenLogprobs",
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type LogProbs$Outbound = {
  text_offset: Array<number>;
  token_logprobs: Array<number>;
  tokens: Array<string>;
  top_logprobs: Array<{ [k: string]: number }>;
};

/** @internal */
export const LogProbs$outboundSchema: z.ZodType<
  LogProbs$Outbound,
  z.ZodTypeDef,
  LogProbs
> = z.object({
  textOffset: z.array(z.number().int()),
  tokenLogprobs: z.array(z.number()),
  tokens: z.array(z.string()),
  topLogprobs: z.array(z.record(z.number())),
}).transform((v) => {
  return remap$(v, {
    textOffset: "text_offset",
    tokenLogprobs: "token_logprobs",
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogProbs$ {
  /** @deprecated use `LogProbs$inboundSchema` instead. */
  export const inboundSchema = LogProbs$inboundSchema;
  /** @deprecated use `LogProbs$outboundSchema` instead. */
  export const outboundSchema = LogProbs$outboundSchema;
  /** @deprecated use `LogProbs$Outbound` instead. */
  export type Outbound = LogProbs$Outbound;
}

export function logProbsToJSON(logProbs: LogProbs): string {
  return JSON.stringify(LogProbs$outboundSchema.parse(logProbs));
}

export function logProbsFromJSON(
  jsonString: string,
): SafeParseResult<LogProbs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogProbs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogProbs' from JSON`,
  );
}
