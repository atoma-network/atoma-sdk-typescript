/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionChunkDelta,
  ChatCompletionChunkDelta$inboundSchema,
  ChatCompletionChunkDelta$Outbound,
  ChatCompletionChunkDelta$outboundSchema,
} from "./chatcompletionchunkdelta.js";
import {
  ChatCompletionLogProbs,
  ChatCompletionLogProbs$inboundSchema,
  ChatCompletionLogProbs$Outbound,
  ChatCompletionLogProbs$outboundSchema,
} from "./chatcompletionlogprobs.js";
import {
  StopReasonUnion,
  StopReasonUnion$inboundSchema,
  StopReasonUnion$Outbound,
  StopReasonUnion$outboundSchema,
} from "./stopreasonunion.js";

/**
 * Represents the chat completion chunk choice.
 *
 * @remarks
 *
 * This is used to represent the chat completion chunk choice in the chat completion request.
 */
export type ChatCompletionChunkChoice = {
  /**
   * Represents the chat completion chunk delta.
   *
   * @remarks
   *
   * This is used to represent the chat completion chunk delta in the chat completion request.
   * It can be either a chat completion chunk delta message or a chat completion chunk delta choice.
   */
  delta: ChatCompletionChunkDelta;
  /**
   * The reason the chat completion was finished, if applicable.
   */
  finishReason?: string | null | undefined;
  /**
   * The index of this choice in the list of choices.
   */
  index: number;
  logprobs?: ChatCompletionLogProbs | null | undefined;
  stopReason?: StopReasonUnion | null | undefined;
};

/** @internal */
export const ChatCompletionChunkChoice$inboundSchema: z.ZodType<
  ChatCompletionChunkChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  delta: ChatCompletionChunkDelta$inboundSchema,
  finish_reason: z.nullable(z.string()).optional(),
  index: z.number().int(),
  logprobs: z.nullable(ChatCompletionLogProbs$inboundSchema).optional(),
  stop_reason: z.nullable(StopReasonUnion$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
    "stop_reason": "stopReason",
  });
});

/** @internal */
export type ChatCompletionChunkChoice$Outbound = {
  delta: ChatCompletionChunkDelta$Outbound;
  finish_reason?: string | null | undefined;
  index: number;
  logprobs?: ChatCompletionLogProbs$Outbound | null | undefined;
  stop_reason?: StopReasonUnion$Outbound | null | undefined;
};

/** @internal */
export const ChatCompletionChunkChoice$outboundSchema: z.ZodType<
  ChatCompletionChunkChoice$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunkChoice
> = z.object({
  delta: ChatCompletionChunkDelta$outboundSchema,
  finishReason: z.nullable(z.string()).optional(),
  index: z.number().int(),
  logprobs: z.nullable(ChatCompletionLogProbs$outboundSchema).optional(),
  stopReason: z.nullable(StopReasonUnion$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
    stopReason: "stop_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunkChoice$ {
  /** @deprecated use `ChatCompletionChunkChoice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunkChoice$inboundSchema;
  /** @deprecated use `ChatCompletionChunkChoice$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunkChoice$outboundSchema;
  /** @deprecated use `ChatCompletionChunkChoice$Outbound` instead. */
  export type Outbound = ChatCompletionChunkChoice$Outbound;
}

export function chatCompletionChunkChoiceToJSON(
  chatCompletionChunkChoice: ChatCompletionChunkChoice,
): string {
  return JSON.stringify(
    ChatCompletionChunkChoice$outboundSchema.parse(chatCompletionChunkChoice),
  );
}

export function chatCompletionChunkChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunkChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunkChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunkChoice' from JSON`,
  );
}
