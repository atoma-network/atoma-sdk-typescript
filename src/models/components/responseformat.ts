/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  JsonSchemaResponseFormat,
  JsonSchemaResponseFormat$inboundSchema,
  JsonSchemaResponseFormat$Outbound,
  JsonSchemaResponseFormat$outboundSchema,
} from "./jsonschemaresponseformat.js";
import {
  ResponseFormatType,
  ResponseFormatType$inboundSchema,
  ResponseFormatType$outboundSchema,
} from "./responseformattype.js";

/**
 * The format to return the response in.
 *
 * @remarks
 *
 * This is used to represent the format to return the response in in the chat completion request.
 * It can be either text, json_object, or json_schema.
 */
export type ResponseFormat = {
  jsonSchema?: JsonSchemaResponseFormat | null | undefined;
  /**
   * The format to return the response in.
   */
  type: ResponseFormatType;
};

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodType<
  ResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  json_schema: z.nullable(JsonSchemaResponseFormat$inboundSchema).optional(),
  type: ResponseFormatType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type ResponseFormat$Outbound = {
  json_schema?: JsonSchemaResponseFormat$Outbound | null | undefined;
  type: string;
};

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodType<
  ResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseFormat
> = z.object({
  jsonSchema: z.nullable(JsonSchemaResponseFormat$outboundSchema).optional(),
  type: ResponseFormatType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
  /** @deprecated use `ResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat$inboundSchema;
  /** @deprecated use `ResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat$outboundSchema;
  /** @deprecated use `ResponseFormat$Outbound` instead. */
  export type Outbound = ResponseFormat$Outbound;
}

export function responseFormatToJSON(responseFormat: ResponseFormat): string {
  return JSON.stringify(ResponseFormat$outboundSchema.parse(responseFormat));
}

export function responseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat' from JSON`,
  );
}
