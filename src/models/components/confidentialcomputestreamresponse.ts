/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConfidentialComputeResponse,
  ConfidentialComputeResponse$inboundSchema,
  ConfidentialComputeResponse$Outbound,
  ConfidentialComputeResponse$outboundSchema,
} from "./confidentialcomputeresponse.js";

/**
 * Represents a response from a confidential compute request
 */
export type ConfidentialComputeStreamResponse = {
  /**
   * Represents a response from a confidential compute request
   */
  data: ConfidentialComputeResponse;
};

/** @internal */
export const ConfidentialComputeStreamResponse$inboundSchema: z.ZodType<
  ConfidentialComputeStreamResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: ConfidentialComputeResponse$inboundSchema,
});

/** @internal */
export type ConfidentialComputeStreamResponse$Outbound = {
  data: ConfidentialComputeResponse$Outbound;
};

/** @internal */
export const ConfidentialComputeStreamResponse$outboundSchema: z.ZodType<
  ConfidentialComputeStreamResponse$Outbound,
  z.ZodTypeDef,
  ConfidentialComputeStreamResponse
> = z.object({
  data: ConfidentialComputeResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfidentialComputeStreamResponse$ {
  /** @deprecated use `ConfidentialComputeStreamResponse$inboundSchema` instead. */
  export const inboundSchema = ConfidentialComputeStreamResponse$inboundSchema;
  /** @deprecated use `ConfidentialComputeStreamResponse$outboundSchema` instead. */
  export const outboundSchema =
    ConfidentialComputeStreamResponse$outboundSchema;
  /** @deprecated use `ConfidentialComputeStreamResponse$Outbound` instead. */
  export type Outbound = ConfidentialComputeStreamResponse$Outbound;
}

export function confidentialComputeStreamResponseToJSON(
  confidentialComputeStreamResponse: ConfidentialComputeStreamResponse,
): string {
  return JSON.stringify(
    ConfidentialComputeStreamResponse$outboundSchema.parse(
      confidentialComputeStreamResponse,
    ),
  );
}

export function confidentialComputeStreamResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConfidentialComputeStreamResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfidentialComputeStreamResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfidentialComputeStreamResponse' from JSON`,
  );
}
