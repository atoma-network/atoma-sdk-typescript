/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Model,
  Model$inboundSchema,
  Model$Outbound,
  Model$outboundSchema,
} from "./model.js";

/**
 * Response object for the models listing endpoint
 */
export type ModelList = {
  /**
   * List of model objects
   */
  data: Array<Model>;
  /**
   * The object type, which is always "list"
   */
  object: string;
};

/** @internal */
export const ModelList$inboundSchema: z.ZodType<
  ModelList,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Model$inboundSchema),
  object: z.string(),
});

/** @internal */
export type ModelList$Outbound = {
  data: Array<Model$Outbound>;
  object: string;
};

/** @internal */
export const ModelList$outboundSchema: z.ZodType<
  ModelList$Outbound,
  z.ZodTypeDef,
  ModelList
> = z.object({
  data: z.array(Model$outboundSchema),
  object: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelList$ {
  /** @deprecated use `ModelList$inboundSchema` instead. */
  export const inboundSchema = ModelList$inboundSchema;
  /** @deprecated use `ModelList$outboundSchema` instead. */
  export const outboundSchema = ModelList$outboundSchema;
  /** @deprecated use `ModelList$Outbound` instead. */
  export type Outbound = ModelList$Outbound;
}

export function modelListToJSON(modelList: ModelList): string {
  return JSON.stringify(ModelList$outboundSchema.parse(modelList));
}

export function modelListFromJSON(
  jsonString: string,
): SafeParseResult<ModelList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelList' from JSON`,
  );
}
