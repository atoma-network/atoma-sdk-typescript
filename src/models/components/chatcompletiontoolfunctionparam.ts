/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A function that can be used in a chat completion.
 */
export type ChatCompletionToolFunctionParam = {
  /**
   * The description of the function.
   */
  description?: string | null | undefined;
  /**
   * The name of the function.
   */
  name: string;
  /**
   * The parameters of the function.
   */
  parameters?: { [k: string]: any } | null | undefined;
  /**
   * Whether to strictly validate the parameters of the function.
   */
  strict?: boolean | null | undefined;
};

/** @internal */
export const ChatCompletionToolFunctionParam$inboundSchema: z.ZodType<
  ChatCompletionToolFunctionParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.string(),
  parameters: z.nullable(z.record(z.any())).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ChatCompletionToolFunctionParam$Outbound = {
  description?: string | null | undefined;
  name: string;
  parameters?: { [k: string]: any } | null | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const ChatCompletionToolFunctionParam$outboundSchema: z.ZodType<
  ChatCompletionToolFunctionParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionToolFunctionParam
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.string(),
  parameters: z.nullable(z.record(z.any())).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionToolFunctionParam$ {
  /** @deprecated use `ChatCompletionToolFunctionParam$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionToolFunctionParam$inboundSchema;
  /** @deprecated use `ChatCompletionToolFunctionParam$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionToolFunctionParam$outboundSchema;
  /** @deprecated use `ChatCompletionToolFunctionParam$Outbound` instead. */
  export type Outbound = ChatCompletionToolFunctionParam$Outbound;
}

export function chatCompletionToolFunctionParamToJSON(
  chatCompletionToolFunctionParam: ChatCompletionToolFunctionParam,
): string {
  return JSON.stringify(
    ChatCompletionToolFunctionParam$outboundSchema.parse(
      chatCompletionToolFunctionParam,
    ),
  );
}

export function chatCompletionToolFunctionParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionToolFunctionParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionToolFunctionParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionToolFunctionParam' from JSON`,
  );
}
