/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Individual model object in the response
 */
export type Model = {
  /**
   * Unix timestamp (in seconds) when this model was created
   */
  created: number;
  /**
   * The model identifier
   */
  id: string;
  /**
   * The object type, which is always "model"
   */
  object: string;
  /**
   * Organization that owns the model
   */
  ownedBy: string;
};

/** @internal */
export const Model$inboundSchema: z.ZodType<Model, z.ZodTypeDef, unknown> = z
  .object({
    created: z.number().int(),
    id: z.string(),
    object: z.string(),
    owned_by: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "owned_by": "ownedBy",
    });
  });

/** @internal */
export type Model$Outbound = {
  created: number;
  id: string;
  object: string;
  owned_by: string;
};

/** @internal */
export const Model$outboundSchema: z.ZodType<
  Model$Outbound,
  z.ZodTypeDef,
  Model
> = z.object({
  created: z.number().int(),
  id: z.string(),
  object: z.string(),
  ownedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    ownedBy: "owned_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model$ {
  /** @deprecated use `Model$inboundSchema` instead. */
  export const inboundSchema = Model$inboundSchema;
  /** @deprecated use `Model$outboundSchema` instead. */
  export const outboundSchema = Model$outboundSchema;
  /** @deprecated use `Model$Outbound` instead. */
  export type Outbound = Model$Outbound;
}

export function modelToJSON(model: Model): string {
  return JSON.stringify(Model$outboundSchema.parse(model));
}

export function modelFromJSON(
  jsonString: string,
): SafeParseResult<Model, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Model$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Model' from JSON`,
  );
}
