/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmbeddingInput,
  EmbeddingInput$inboundSchema,
  EmbeddingInput$Outbound,
  EmbeddingInput$outboundSchema,
} from "./embeddinginput.js";

/**
 * Request object for creating embeddings
 */
export type CreateEmbeddingRequest = {
  /**
   * The number of dimensions the resulting output embeddings should have.
   */
  dimensions?: number | null | undefined;
  /**
   * The format to return the embeddings in. Can be "float" or "base64".
   *
   * @remarks
   * Defaults to "float"
   */
  encodingFormat?: string | null | undefined;
  input: EmbeddingInput;
  /**
   * ID of the model to use.
   */
  model: string;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
   */
  user?: string | null | undefined;
};

/** @internal */
export const CreateEmbeddingRequest$inboundSchema: z.ZodType<
  CreateEmbeddingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dimensions: z.nullable(z.number().int()).optional(),
  encoding_format: z.nullable(z.string()).optional(),
  input: EmbeddingInput$inboundSchema,
  model: z.string(),
  user: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreateEmbeddingRequest$Outbound = {
  dimensions?: number | null | undefined;
  encoding_format?: string | null | undefined;
  input: EmbeddingInput$Outbound;
  model: string;
  user?: string | null | undefined;
};

/** @internal */
export const CreateEmbeddingRequest$outboundSchema: z.ZodType<
  CreateEmbeddingRequest$Outbound,
  z.ZodTypeDef,
  CreateEmbeddingRequest
> = z.object({
  dimensions: z.nullable(z.number().int()).optional(),
  encodingFormat: z.nullable(z.string()).optional(),
  input: EmbeddingInput$outboundSchema,
  model: z.string(),
  user: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmbeddingRequest$ {
  /** @deprecated use `CreateEmbeddingRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEmbeddingRequest$inboundSchema;
  /** @deprecated use `CreateEmbeddingRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEmbeddingRequest$outboundSchema;
  /** @deprecated use `CreateEmbeddingRequest$Outbound` instead. */
  export type Outbound = CreateEmbeddingRequest$Outbound;
}

export function createEmbeddingRequestToJSON(
  createEmbeddingRequest: CreateEmbeddingRequest,
): string {
  return JSON.stringify(
    CreateEmbeddingRequest$outboundSchema.parse(createEmbeddingRequest),
  );
}

export function createEmbeddingRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEmbeddingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEmbeddingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEmbeddingRequest' from JSON`,
  );
}
