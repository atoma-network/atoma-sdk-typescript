/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageContentPartUnion,
  MessageContentPartUnion$inboundSchema,
  MessageContentPartUnion$Outbound,
  MessageContentPartUnion$outboundSchema,
} from "./messagecontentpartunion.js";

/**
 * Represents the content of a message.
 *
 * @remarks
 *
 * This is used to represent the content of a message in the chat completion request.
 * It can be either a text or an array of content parts.
 */
export type MessageContent = string | Array<MessageContentPartUnion>;

/** @internal */
export const MessageContent$inboundSchema: z.ZodType<
  MessageContent,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(MessageContentPartUnion$inboundSchema)]);

/** @internal */
export type MessageContent$Outbound =
  | string
  | Array<MessageContentPartUnion$Outbound>;

/** @internal */
export const MessageContent$outboundSchema: z.ZodType<
  MessageContent$Outbound,
  z.ZodTypeDef,
  MessageContent
> = z.union([z.string(), z.array(MessageContentPartUnion$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContent$ {
  /** @deprecated use `MessageContent$inboundSchema` instead. */
  export const inboundSchema = MessageContent$inboundSchema;
  /** @deprecated use `MessageContent$outboundSchema` instead. */
  export const outboundSchema = MessageContent$outboundSchema;
  /** @deprecated use `MessageContent$Outbound` instead. */
  export type Outbound = MessageContent$Outbound;
}

export function messageContentToJSON(messageContent: MessageContent): string {
  return JSON.stringify(MessageContent$outboundSchema.parse(messageContent));
}

export function messageContentFromJSON(
  jsonString: string,
): SafeParseResult<MessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageContent' from JSON`,
  );
}
