/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request body for image generation
 */
export type CreateImageRequest = {
  /**
   * The model to use for image generation.
   */
  model: string;
  /**
   * The number of images to generate. Defaults to 1.
   */
  n?: number | null | undefined;
  /**
   * A text description of the desired image(s). The maximum length is 1000 characters.
   */
  prompt: string;
  /**
   * The quality of the image that will be generated.
   *
   * @remarks
   * `hd` creates images with finer details and greater consistency across the image.
   */
  quality?: string | null | undefined;
  /**
   * The format in which the generated images are returned.
   */
  responseFormat?: string | null | undefined;
  /**
   * The size of the generated images.
   */
  size?: string | null | undefined;
  /**
   * The style of the generated images.
   */
  style?: string | null | undefined;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
   */
  user?: string | null | undefined;
};

/** @internal */
export const CreateImageRequest$inboundSchema: z.ZodType<
  CreateImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  prompt: z.string(),
  quality: z.nullable(z.string()).optional(),
  response_format: z.nullable(z.string()).optional(),
  size: z.nullable(z.string()).optional(),
  style: z.nullable(z.string()).optional(),
  user: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
  });
});

/** @internal */
export type CreateImageRequest$Outbound = {
  model: string;
  n?: number | null | undefined;
  prompt: string;
  quality?: string | null | undefined;
  response_format?: string | null | undefined;
  size?: string | null | undefined;
  style?: string | null | undefined;
  user?: string | null | undefined;
};

/** @internal */
export const CreateImageRequest$outboundSchema: z.ZodType<
  CreateImageRequest$Outbound,
  z.ZodTypeDef,
  CreateImageRequest
> = z.object({
  model: z.string(),
  n: z.nullable(z.number().int()).optional(),
  prompt: z.string(),
  quality: z.nullable(z.string()).optional(),
  responseFormat: z.nullable(z.string()).optional(),
  size: z.nullable(z.string()).optional(),
  style: z.nullable(z.string()).optional(),
  user: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageRequest$ {
  /** @deprecated use `CreateImageRequest$inboundSchema` instead. */
  export const inboundSchema = CreateImageRequest$inboundSchema;
  /** @deprecated use `CreateImageRequest$outboundSchema` instead. */
  export const outboundSchema = CreateImageRequest$outboundSchema;
  /** @deprecated use `CreateImageRequest$Outbound` instead. */
  export type Outbound = CreateImageRequest$Outbound;
}

export function createImageRequestToJSON(
  createImageRequest: CreateImageRequest,
): string {
  return JSON.stringify(
    CreateImageRequest$outboundSchema.parse(createImageRequest),
  );
}

export function createImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageRequest' from JSON`,
  );
}
