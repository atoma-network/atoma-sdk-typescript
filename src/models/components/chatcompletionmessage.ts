/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageContent,
  MessageContent$inboundSchema,
  MessageContent$Outbound,
  MessageContent$outboundSchema,
} from "./messagecontent.js";
import {
  ToolCall,
  ToolCall$inboundSchema,
  ToolCall$Outbound,
  ToolCall$outboundSchema,
} from "./toolcall.js";

export const RoleTool = {
  Tool: "tool",
} as const;
export type RoleTool = ClosedEnum<typeof RoleTool>;

/**
 * The role of the messages author, in this case tool.
 */
export type Tool = {
  content?: MessageContent | null | undefined;
  role: RoleTool;
  /**
   * Tool call that this message is responding to.
   */
  toolCallId?: string | undefined;
};

export const RoleAssistant = {
  Assistant: "assistant",
} as const;
export type RoleAssistant = ClosedEnum<typeof RoleAssistant>;

/**
 * The role of the messages author, in this case assistant.
 */
export type Assistant = {
  content?: MessageContent | null | undefined;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | null | undefined;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string | null | undefined;
  role: RoleAssistant;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls?: Array<ToolCall> | undefined;
};

export const RoleUser = {
  User: "user",
} as const;
export type RoleUser = ClosedEnum<typeof RoleUser>;

/**
 * The role of the messages author, in this case user.
 */
export type User = {
  content?: MessageContent | null | undefined;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | null | undefined;
  role: RoleUser;
};

export const RoleSystem = {
  System: "system",
} as const;
export type RoleSystem = ClosedEnum<typeof RoleSystem>;

/**
 * The role of the messages author, in this case system.
 */
export type System = {
  content?: MessageContent | null | undefined;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | null | undefined;
  role: RoleSystem;
};

/**
 * A message that is part of a conversation which is based on the role
 *
 * @remarks
 * of the author of the message.
 *
 * This is used to represent the message in the chat completion request.
 * It can be either a system message, a user message, an assistant message, or a tool message.
 */
export type ChatCompletionMessage = System | User | Tool | Assistant;

/** @internal */
export const RoleTool$inboundSchema: z.ZodNativeEnum<typeof RoleTool> = z
  .nativeEnum(RoleTool);

/** @internal */
export const RoleTool$outboundSchema: z.ZodNativeEnum<typeof RoleTool> =
  RoleTool$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleTool$ {
  /** @deprecated use `RoleTool$inboundSchema` instead. */
  export const inboundSchema = RoleTool$inboundSchema;
  /** @deprecated use `RoleTool$outboundSchema` instead. */
  export const outboundSchema = RoleTool$outboundSchema;
}

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z
  .object({
    content: z.nullable(MessageContent$inboundSchema).optional(),
    role: RoleTool$inboundSchema,
    tool_call_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_call_id": "toolCallId",
    });
  });

/** @internal */
export type Tool$Outbound = {
  content?: MessageContent$Outbound | null | undefined;
  role: string;
  tool_call_id?: string | undefined;
};

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> =
  z.object({
    content: z.nullable(MessageContent$outboundSchema).optional(),
    role: RoleTool$outboundSchema,
    toolCallId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCallId: "tool_call_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
  /** @deprecated use `Tool$inboundSchema` instead. */
  export const inboundSchema = Tool$inboundSchema;
  /** @deprecated use `Tool$outboundSchema` instead. */
  export const outboundSchema = Tool$outboundSchema;
  /** @deprecated use `Tool$Outbound` instead. */
  export type Outbound = Tool$Outbound;
}

export function toolToJSON(tool: Tool): string {
  return JSON.stringify(Tool$outboundSchema.parse(tool));
}

export function toolFromJSON(
  jsonString: string,
): SafeParseResult<Tool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tool' from JSON`,
  );
}

/** @internal */
export const RoleAssistant$inboundSchema: z.ZodNativeEnum<
  typeof RoleAssistant
> = z.nativeEnum(RoleAssistant);

/** @internal */
export const RoleAssistant$outboundSchema: z.ZodNativeEnum<
  typeof RoleAssistant
> = RoleAssistant$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAssistant$ {
  /** @deprecated use `RoleAssistant$inboundSchema` instead. */
  export const inboundSchema = RoleAssistant$inboundSchema;
  /** @deprecated use `RoleAssistant$outboundSchema` instead. */
  export const outboundSchema = RoleAssistant$outboundSchema;
}

/** @internal */
export const Assistant$inboundSchema: z.ZodType<
  Assistant,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(MessageContent$inboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  role: RoleAssistant$inboundSchema,
  tool_calls: z.array(ToolCall$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Assistant$Outbound = {
  content?: MessageContent$Outbound | null | undefined;
  name?: string | null | undefined;
  refusal?: string | null | undefined;
  role: string;
  tool_calls?: Array<ToolCall$Outbound> | undefined;
};

/** @internal */
export const Assistant$outboundSchema: z.ZodType<
  Assistant$Outbound,
  z.ZodTypeDef,
  Assistant
> = z.object({
  content: z.nullable(MessageContent$outboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  role: RoleAssistant$outboundSchema,
  toolCalls: z.array(ToolCall$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Assistant$ {
  /** @deprecated use `Assistant$inboundSchema` instead. */
  export const inboundSchema = Assistant$inboundSchema;
  /** @deprecated use `Assistant$outboundSchema` instead. */
  export const outboundSchema = Assistant$outboundSchema;
  /** @deprecated use `Assistant$Outbound` instead. */
  export type Outbound = Assistant$Outbound;
}

export function assistantToJSON(assistant: Assistant): string {
  return JSON.stringify(Assistant$outboundSchema.parse(assistant));
}

export function assistantFromJSON(
  jsonString: string,
): SafeParseResult<Assistant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Assistant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Assistant' from JSON`,
  );
}

/** @internal */
export const RoleUser$inboundSchema: z.ZodNativeEnum<typeof RoleUser> = z
  .nativeEnum(RoleUser);

/** @internal */
export const RoleUser$outboundSchema: z.ZodNativeEnum<typeof RoleUser> =
  RoleUser$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleUser$ {
  /** @deprecated use `RoleUser$inboundSchema` instead. */
  export const inboundSchema = RoleUser$inboundSchema;
  /** @deprecated use `RoleUser$outboundSchema` instead. */
  export const outboundSchema = RoleUser$outboundSchema;
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    content: z.nullable(MessageContent$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    role: RoleUser$inboundSchema,
  });

/** @internal */
export type User$Outbound = {
  content?: MessageContent$Outbound | null | undefined;
  name?: string | null | undefined;
  role: string;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    content: z.nullable(MessageContent$outboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    role: RoleUser$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}

/** @internal */
export const RoleSystem$inboundSchema: z.ZodNativeEnum<typeof RoleSystem> = z
  .nativeEnum(RoleSystem);

/** @internal */
export const RoleSystem$outboundSchema: z.ZodNativeEnum<typeof RoleSystem> =
  RoleSystem$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleSystem$ {
  /** @deprecated use `RoleSystem$inboundSchema` instead. */
  export const inboundSchema = RoleSystem$inboundSchema;
  /** @deprecated use `RoleSystem$outboundSchema` instead. */
  export const outboundSchema = RoleSystem$outboundSchema;
}

/** @internal */
export const System$inboundSchema: z.ZodType<System, z.ZodTypeDef, unknown> = z
  .object({
    content: z.nullable(MessageContent$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    role: RoleSystem$inboundSchema,
  });

/** @internal */
export type System$Outbound = {
  content?: MessageContent$Outbound | null | undefined;
  name?: string | null | undefined;
  role: string;
};

/** @internal */
export const System$outboundSchema: z.ZodType<
  System$Outbound,
  z.ZodTypeDef,
  System
> = z.object({
  content: z.nullable(MessageContent$outboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  role: RoleSystem$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace System$ {
  /** @deprecated use `System$inboundSchema` instead. */
  export const inboundSchema = System$inboundSchema;
  /** @deprecated use `System$outboundSchema` instead. */
  export const outboundSchema = System$outboundSchema;
  /** @deprecated use `System$Outbound` instead. */
  export type Outbound = System$Outbound;
}

export function systemToJSON(system: System): string {
  return JSON.stringify(System$outboundSchema.parse(system));
}

export function systemFromJSON(
  jsonString: string,
): SafeParseResult<System, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => System$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'System' from JSON`,
  );
}

/** @internal */
export const ChatCompletionMessage$inboundSchema: z.ZodType<
  ChatCompletionMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => System$inboundSchema),
  z.lazy(() => User$inboundSchema),
  z.lazy(() => Tool$inboundSchema),
  z.lazy(() => Assistant$inboundSchema),
]);

/** @internal */
export type ChatCompletionMessage$Outbound =
  | System$Outbound
  | User$Outbound
  | Tool$Outbound
  | Assistant$Outbound;

/** @internal */
export const ChatCompletionMessage$outboundSchema: z.ZodType<
  ChatCompletionMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionMessage
> = z.union([
  z.lazy(() => System$outboundSchema),
  z.lazy(() => User$outboundSchema),
  z.lazy(() => Tool$outboundSchema),
  z.lazy(() => Assistant$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionMessage$ {
  /** @deprecated use `ChatCompletionMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionMessage$inboundSchema;
  /** @deprecated use `ChatCompletionMessage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionMessage$outboundSchema;
  /** @deprecated use `ChatCompletionMessage$Outbound` instead. */
  export type Outbound = ChatCompletionMessage$Outbound;
}

export function chatCompletionMessageToJSON(
  chatCompletionMessage: ChatCompletionMessage,
): string {
  return JSON.stringify(
    ChatCompletionMessage$outboundSchema.parse(chatCompletionMessage),
  );
}

export function chatCompletionMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionMessage' from JSON`,
  );
}
