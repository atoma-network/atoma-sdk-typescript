/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Completions
 */
export type CompletionsCreateStreamResponseBody = {
  data: components.CompletionsStreamResponse;
};

/** @internal */
export const CompletionsCreateStreamResponseBody$inboundSchema: z.ZodType<
  CompletionsCreateStreamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(components.CompletionsStreamResponse$inboundSchema),
});

/** @internal */
export type CompletionsCreateStreamResponseBody$Outbound = {
  data: components.CompletionsStreamResponse$Outbound;
};

/** @internal */
export const CompletionsCreateStreamResponseBody$outboundSchema: z.ZodType<
  CompletionsCreateStreamResponseBody$Outbound,
  z.ZodTypeDef,
  CompletionsCreateStreamResponseBody
> = z.object({
  data: components.CompletionsStreamResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionsCreateStreamResponseBody$ {
  /** @deprecated use `CompletionsCreateStreamResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompletionsCreateStreamResponseBody$inboundSchema;
  /** @deprecated use `CompletionsCreateStreamResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompletionsCreateStreamResponseBody$outboundSchema;
  /** @deprecated use `CompletionsCreateStreamResponseBody$Outbound` instead. */
  export type Outbound = CompletionsCreateStreamResponseBody$Outbound;
}

export function completionsCreateStreamResponseBodyToJSON(
  completionsCreateStreamResponseBody: CompletionsCreateStreamResponseBody,
): string {
  return JSON.stringify(
    CompletionsCreateStreamResponseBody$outboundSchema.parse(
      completionsCreateStreamResponseBody,
    ),
  );
}

export function completionsCreateStreamResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompletionsCreateStreamResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionsCreateStreamResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionsCreateStreamResponseBody' from JSON`,
  );
}
