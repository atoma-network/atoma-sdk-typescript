/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { nodePublicAddressRegistrationNodePublicAddressRegistration } from "../funcs/nodePublicAddressRegistrationNodePublicAddressRegistration.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";

export class NodePublicAddressRegistration extends ClientSDK {
  /**
   * Register node
   *
   * @remarks
   * This endpoint allows nodes to register or update their public address in the system.
   * When a node comes online or changes its address, it can use this endpoint to ensure
   * the system has its current address for routing requests.
   *
   * ## Errors
   *
   * Returns various `AtomaProxyError` variants:
   * * `MissingHeader` - If the signature header is missing
   * * `InvalidHeader` - If the signature header is malformed
   * * `InvalidBody` - If:
   *   - The request body cannot be read
   *   - The signature is invalid
   *   - The body cannot be parsed
   *   - The sui address doesn't match the signature
   * * `InternalError` - If:
   *   - The state manager channel is closed
   *   - The registration event cannot be sent
   *   - Node Sui address lookup fails
   */
  async nodePublicAddressRegistration(
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(
      nodePublicAddressRegistrationNodePublicAddressRegistration(
        this,
        options,
      ),
    );
  }
}
