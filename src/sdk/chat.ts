/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { chatCreate } from "../funcs/chatCreate.js";
import { chatCreateStream } from "../funcs/chatCreateStream.js";
import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Chat extends ClientSDK {
  /**
   * Create chat completion
   *
   * @remarks
   * This function processes chat completion requests by determining whether to use streaming
   * or non-streaming response handling based on the request payload. For streaming requests,
   * it configures additional options to track token usage.
   *
   * ## Returns
   *
   * Returns a Response containing either:
   * - A streaming SSE connection for real-time completions
   * - A single JSON response for non-streaming completions
   *
   * ## Errors
   *
   * Returns an error status code if:
   * - The request processing fails
   * - The streaming/non-streaming handlers encounter errors
   * - The underlying inference service returns an error
   */
  async create(
    request: components.CreateChatCompletionRequest,
    options?: RequestOptions,
  ): Promise<components.ChatCompletionResponse> {
    return unwrapAsync(chatCreate(
      this,
      request,
      options,
    ));
  }

  async createStream(
    request: components.CreateChatCompletionStreamRequest,
    options?: RequestOptions,
  ): Promise<EventStream<components.ChatCompletionStreamResponse>> {
    return unwrapAsync(chatCreateStream(
      this,
      request,
      options,
    ));
  }
}
