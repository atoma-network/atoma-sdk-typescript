/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { completionsCreate } from "../funcs/completionsCreate.js";
import { completionsCreateStream } from "../funcs/completionsCreateStream.js";
import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Completions extends ClientSDK {
  /**
   * Create completions
   *
   * @remarks
   * This function processes completion requests by using the chat completions endpoint.
   *
   * ## Returns
   *
   * Returns a Response containing either:
   * - A streaming SSE connection for real-time completions
   * - A single JSON response for non-streaming completions
   *
   * ## Errors
   *
   * Returns an error status code if:
   * - The request processing fails
   * - The streaming/non-streaming handlers encounter errors
   * - The underlying inference service returns an error
   */
  async create(
    request: components.CompletionsRequest,
    options?: RequestOptions,
  ): Promise<components.CompletionsResponse> {
    return unwrapAsync(completionsCreate(
      this,
      request,
      options,
    ));
  }

  async createStream(
    request: components.CreateCompletionsStreamRequest,
    options?: RequestOptions,
  ): Promise<EventStream<operations.CompletionsCreateStreamResponseBody>> {
    return unwrapAsync(completionsCreateStream(
      this,
      request,
      options,
    ));
  }
}
