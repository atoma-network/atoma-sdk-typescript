overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: health
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.health.health();

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/chat/completions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: chat_completions_create
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.chat.create({
                frequencyPenalty: 0,
                maxTokens: 2048,
                messages: [
                  {
                    content: "Hello! How can you help me today?",
                    name: "john_doe",
                    role: "user",
                  },
                ],
                model: "meta-llama/Llama-3.3-70B-Instruct",
                n: 1,
                presencePenalty: 0,
                seed: 123,
                stop: [
                  "json([\"stop\", \"halt\"])",
                ],
                temperature: 0.7,
                topP: 1,
                user: "user-1234",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/chat/completions#stream"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: chat_completions_create_stream
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.chat.createStream({
                frequencyPenalty: 0,
                maxTokens: 2048,
                messages: [
                  {
                    content: "Hello! How can you help me today?",
                    name: "john_doe",
                    role: "user",
                  },
                ],
                model: "meta-llama/Llama-3.3-70B-Instruct",
                n: 1,
                presencePenalty: 0,
                seed: 123,
                stop: [
                  "json([\"stop\", \"halt\"])",
                ],
                temperature: 0.7,
                topP: 1,
                user: "user-1234",
              });

              for await (const event of result) {
                // Handle the event
                console.log(event);
              }
            }

            run();
  - target: $["paths"]["/v1/confidential/chat/completions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: confidential_chat_completions_create
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.confidentialChat.create({
                ciphertext: "<value>",
                clientDhPublicKey: "<value>",
                modelName: "<value>",
                nodeDhPublicKey: "<value>",
                nonce: "<value>",
                plaintextBodyHash: "<value>",
                salt: "<value>",
                stackSmallId: 486589,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/confidential/chat/completions#stream"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: confidential_chat_completions_create_stream
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.confidentialChat.createStream({
                ciphertext: "<value>",
                clientDhPublicKey: "<value>",
                modelName: "<value>",
                nodeDhPublicKey: "<value>",
                nonce: "<value>",
                plaintextBodyHash: "<value>",
                salt: "<value>",
                stackSmallId: 180107,
              });

              for await (const event of result) {
                // Handle the event
                console.log(event);
              }
            }

            run();
  - target: $["paths"]["/v1/confidential/embeddings"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: confidential_embeddings_create
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.confidentialEmbeddings.create({
                ciphertext: "<value>",
                clientDhPublicKey: "<value>",
                modelName: "<value>",
                nodeDhPublicKey: "<value>",
                nonce: "<value>",
                plaintextBodyHash: "<value>",
                salt: "<value>",
                stackSmallId: 486589,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/confidential/images/generations"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: confidential_image_generations_create
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.confidentialImages.generate({
                ciphertext: "<value>",
                clientDhPublicKey: "<value>",
                modelName: "<value>",
                nodeDhPublicKey: "<value>",
                nonce: "<value>",
                plaintextBodyHash: "<value>",
                salt: "<value>",
                stackSmallId: 740198,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/embeddings"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: embeddings_create
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.embeddings.create({
                encodingFormat: "float",
                input: "The quick brown fox jumped over the lazy dog",
                model: "intfloat/multilingual-e5-large-instruct",
                user: "user-1234",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/images/generations"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: image_generations_create
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.images.generate({
                model: "black-forest-labs/FLUX.1-schnell",
                n: 1,
                prompt: "A cute baby sea otter floating on its back",
                quality: "hd",
                responseFormat: "url",
                size: "1024x1024",
                style: "vivid",
                user: "user-1234",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/models"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: models_list
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.models.modelsList();

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/nodes"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: nodes_create
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.nodes.nodesCreate({
                data: {
                  country: "Andorra",
                  nodeSmallId: 3665,
                  publicAddress: "<value>",
                },
                signature: "<value>",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/v1/nodes/lock"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: nodes_create_lock
          source: |-
            import { AtomaSDK } from "atoma-sdk";

            const atomaSDK = new AtomaSDK({
              bearerAuth: process.env["ATOMASDK_BEARER_AUTH"] ?? "",
            });

            async function run() {
              const result = await atomaSDK.nodes.nodesCreateLock({
                model: "Focus",
              });

              // Handle the result
              console.log(result);
            }

            run();
